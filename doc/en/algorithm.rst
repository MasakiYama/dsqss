.. -*- coding: utf-8 -*-
.. highlight:: none

アルゴリズム
---------------

経路積分サンプリング
********************

DSQSSでは、分配関数を

.. math :: 

    Z \equiv \text{Tr} e^{-\beta H} =\sum_S W(S)

と経路積分表示したのち、マルコフ過程によって状態 :math:`S` を確率的時系列的に発生し、これをサンプリングする（経路積分モンテカルロ法）。
ここで :math:`H` は系を記述するハミルトニアンで、「状態」とは :math:`d+1` 次元時空上で定義された古典変数の場である
（モデルが定義されている空間次元を :math:`d` として、これに虚数時間軸を加えたものを :math:`d+1` 次元時空と呼ぶ)。
また c-数 :math:`W(S)` は状態 :math:`S` の重みを表す。
「状態」をひとつ定めることは、スピンや粒子の空間的な配置が虚数時間の増加に伴って変化する経路をひとつ定めることと等価であるため、
状態 :math:`S` は「経路」とも呼ばれる。
ボーズ粒子系のように局所的な粒子数保存則が成立する場合に、
状態を粒子の存在位置を実線でつないだ軌跡（＝世界線）の集まりとして視覚化することが多いため、
経路積分モンテカルロ法は「世界線モンテカルロ法」とも呼ばれる。
マルコフ過程の遷移確率は、定常分布において状態の出現頻度が重み :math:`W(S)` に比例するように定義される。
マルコフ過程で順次出現する状態を :math:`S_t (t=1,2,3....)` とした時、演算子 :math:`Q` の期待値

.. math :: 
    \langle Q \rangle \equiv \mathrm{Tr}( Q e^{-\beta H} ) /\mathrm{Tr}( e^{-\beta H} )

は :math:`Q` に対応する観測量 :math:`Q(S)` の統計的期待値

.. math :: 
    \langle Q \rangle_\text{MC} \equiv \frac{1}{N_\text{MCS}}\sum_{t = N_\text{therm}+1}^{N_\text{MCS}+N_\text{therm}} Q(S_t)

によって近似される。
この近似は初期条件の影響による系統誤差と、サンプリングによる統計誤差を含む。
系統誤差が無視できるためには、空回し数 :math:`N_\text{therm}` が初期緩和時間よりも大きいことが必要で、
その限りでは指数関数的に速やかに収束する。
一方統計誤差はサンプル数 :math:`N_\text{MCS}` を大きくしたときに、
この :math:`1/2` 乗に逆比例して小さくなることが期待される。

ワーム更新法
********************

マルコフ過程の遷移確率の構成方法すなわち状態更新方法にはいろいろな種類があり、
それぞれ利点・欠点がある。
スピン系、ボーズ系のシミュレーションで用いられる代表的な更新方法はループ更新とワーム更新である。
ループ更新は全系をループと呼ばれるクラスターに分割してループごとに状態更新するもので、
高速な更新が可能だが、一様磁場中での反強磁性体やボーズ系では効率が著しく低下してしまう。
一方ワーム更新は、全系に保存則を破る点（ワーム）を2つ導入して、
これらの点を移動させることで状態を更新する方法である。
ワームは非対角成分のみをもつ演算子に対応する。
たとえば、各点での粒子数が対角化されている表示を用いたボーズ系のシミュレーションでは、
ワーム演算子として生成消滅演算子が用いられる。
このとき、ワームの前後の虚数時刻では粒子数が1だけ異なっており、
このワームが移動すると、ワームが通過した部分の粒子数は通過前から1だけ変化し、
ワームの移動によって状態が更新される。
ワーム更新法は、上記のループ更新に比べると広い範囲のモデルで有効となる。

オリジナルのワーム更新法では、ワームは虚時間方向および実空間方向にランダムウォークしていた。
一方、ワームの空間方向での移動が起きる候補であるバーテックスを、
ループ更新と同様にしてあらかじめ作り、
ワームはバーテックスにぶつかるまで虚時間方向で直進するようにしたものが向き付きループアルゴリズム(DLA)である。
DSQSS/DLA はDLA を実装したプログラムである。

マルチワームアルゴリズム
***********************************
DLAではただひとつのワームヘッドを動かすことで状態を更新しているため、時空間分割などの非自明並列が行えない。
この問題を解決するために提案されたアルゴリズムが、ワーム対の個数制限を取り除いたマルチワームアルゴリズム (MWA) および
その時空間並列版アルゴリズムである PMWA である。
DSQSS/PMWA はPMWA を実装したプログラムである。

on-the-fly バーテックス法
***********************************
ワーム更新法では、
ワームの生成、ワームの時間方向の移動、ワームの空間方向の移動（散乱）、ワームの消滅などからなるサイクルが更新の時間的単位となっている。
このサイクルを繰り返すことで逐次的に状態が更新される。
このうちワームの空間方向の移動を実現する仕方として、
移動の起こる場所（バーテックス）をあらかじめ全系に配置しておくやり方(固定バーテックス法)と、
ワームの進行方向に必要に応じて配置するやり方(on-the-fly バーテックス法)とがある。
固定バーテックス法では、状態更新の基本的単位（1モンテカルロステップ）は、

1. バーテックスの配置
2. ワームの生成から消滅までの（複数）サイクル

のふたつのフェーズからなるが、 on-the-flyバーテックス法では2のみからなる。

DSQSS/DLA では、on-the-fly バーテックス法を、DSQSS/PMWA では固定バーテックス法を採用している。

バーテックス配置
***********************************
分配関数に現れる重み :math:`W(S)` は格子点 :math:`i,j` 間の相互作用を :math:`H_{ij}` として,

.. math :: 
    W(S) = \prod_{(ij), \tau} \langle S_i (\tau + \Delta \tau) S_j(\tau + \Delta \tau)| e^{-\Delta \tau H_{ij}}| S_i (\tau) S_j(\tau)\rangle

と書ける。
ここで、虚数時間 :math:`\tau` に関する積は :math:`\Delta \tau` を単位として離散化されているとした
（これは説明のためであり, 実際の計算では連続虚数時間で行われる）。
:math:`H_{ij}` で相互作用する実空間の2点 :math:`i,j` に関して、
虚数時間区間 :math:`[0,\beta)` は状態 :math:`S_i (\tau)` か :math:`S_j(\tau)` に不連続変化がある時刻によって有限個の区間に分割される。
各区間内では、2点の状態は :math:`S_i (\tau),S_j (\tau)` は一定であり、密度

.. math :: 
    \langle S_i S_j | E_0 - H_{ij} | S_i S_j \rangle

でバーテックスが一様ランダムに確率的に配置される。
ここで、エネルギーシフト :math:`E_0` はある定数であり、上記の密度が正である限り任意にとることができる。
状態一定の区間に配置されるこれらのバーテックスに加えて、
状態変化（キンク）のある虚数時刻に対しては、
確率1でその時刻にバーテックスが配置される。
バーテックスはファインマンダイアグラムを用いた分配関数の展開における相互作用グラフに対応している。

ワームの生成・消滅
***********************************

ワームの生成にあたっては、まず状態遷移先の候補として、
時空から一様ランダムに時空点 :math:`i,\tau` とワーム対を表す非対角演算子対 :math:`Q,Q'` を選ぶ。
次に確率 :math:`p_\text{create}` で実際にワーム対を生成する。
消滅はこの逆過程であり、ワーム対が同じ時空点に来た時に一定の確率 :math:`p_\text{annihilate}` で消滅する。
これらの確率は次の式で表される詳細つり合い条件

.. math :: 
    \frac{\Delta \tau}{\beta N_\text{site} N_Q} \times p_\text{create} = p_\text{annihilate} \times (\eta \Delta \tau)^2 \langle S_i (\tau) | Q_i | S_i'(\tau) \rangle \langle S_i' (\tau) | Q_i' | S_i(\tau) \rangle

が成り立つように定められる。
ここで、 :math:`N_Q` は取りうる :math:`Q` の数で、 :math:`S'` は :math:`\langle S | Q | S' \rangle` が非ゼロの値を取る（普通は :math:`S,Q` の組に対して一意に定まる）状態である。
また、:math:`\eta` はワーム演算子に共役な場の量で、例えばスピン系でワーム演算子を昇降演算子にとったときは横磁場（の半分）となる。
DLAでは、 :math:`\eta` の値は任意にとれるので、
DSQSS/DLA の補助ツール ``dla_alg`` では :math:`\eta^{-2} = \beta N_\text{site} N_Q \Delta\tau \max_{S,Q} |\langle S | Q_i |S' \rangle|^2`
とすることで

.. math :: 
    p_{\rm create} = |\langle S_i (\tau) | Q_i | S_i'(\tau) \rangle|^2/\max_{S,Q} |\langle S | Q_i | S' \rangle|^2

かつ :math:`p_\text{annihilate}=1` としている。
``algorithm.xml`` をユーザが独自に編集することで、
ユーザの指定した生成消滅確率でシミュレーションを行うことも可能である。

ワームの散乱
***********************************

バーテックスにおけるワームの散乱は、バーテックス自体の重みとワームの持つ重みの間に詳細つり合いが成立するように決定される。
たとえば、虚数時刻が増加する方向にサイト :math:`i` 上を移動してきたワームが虚数時刻 :math:`\tau` にあるバーテックスに当たったとし、
衝突後はサイト :math:`j` を虚数時刻が減少する方向に出ていく過程を考えると、
この場合、このような衝突が選ばれる確率 :math:`P` と、逆向きの衝突が選ばれる確率 :math:`P'` との間には

.. math :: 
    & P \times \langle S_i (\tau+0) S_j (\tau+0) | E_0 -H_{ij} |S_i (\tau) S_j (\tau) \rangle \langle S_i (\tau) | Q_i | S_i'\rangle \\
    & = P' \times \langle S_i (\tau+0) S_j (\tau+0) | E_0 -H_{ij} |S_i' (\tau) S_j' (\tau) \rangle \langle S_j' (\tau) | Q_j | S_j\rangle

の関係が満たされる必要がある。
ここで :math:`Q_i,Q_j` はワームを表す非対角演算子、 :math:`S'_i (\tau), S'_j (\tau)` はワームが通過した後のそれぞれのサイト、時刻の状態である。
DSQSS/DLAでは、``algorithm.xml`` ファイルをユーザが直接編集することによって、任意の散乱確率を指定できるほか、
ハミルトニアンを指定したときに、このような条件を満たす散乱確率を自動的に計算する補助ツール ``dla_alg`` を持っている。

参考文献
*************

* `N. Kawashima and K. Harada, "Recent Developments of World-line Monte Carlo Methods", Journal of the Physical Society of Japan, Vol. 73, 1379-1414 (2004) <https://journals.jps.jp/doi/abs/10.1143/JPSJ.73.1379>`_.
* `J. Gubernatis, N. Kawashima, and P. Werner, "Quantum Monte Carlo Methods; Algorithms for Lattice Models", Cambridge University Press (2016) <http://www.cambridge.org/gb/academic/subjects/physics/condensed-matter-physics-nanoscience-and-mesoscopic-physics/quantum-monte-carlo-methods-algorithms-lattice-models?format=HB>`_.
